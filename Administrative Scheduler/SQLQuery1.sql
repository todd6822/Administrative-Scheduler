/*
Deployment script for administrativeServer

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "administrativeServer"
:setvar DefaultFilePrefix "administrativeServer"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Creating [dbo].[InsertConstraint]...';


GO
CREATE Procedure [InsertConstraint]
@workLoadId int,
@constraintName varchar(50),
@constrainttype varchar(50),
@constraintValue int,
@constraintDuration varchar(50)


AS 

Begin 


	declare @oldConstraintName nvarchar(50), @constraintNumber int;
	set @oldConstraintName='';

	Begin try


	 Begin Transaction
	  if NOT EXISTS (select top 1 * from constraintTable where (@constrainttype=constraintType) and (@constraintValue=ConstraintValue)and constraintDuration=constraintDuration)
	  begin
	  insert into constraintTable(constraintName,constraintType,constraintValue,constraintDuration) values (@constraintName,@constrainttype,@constraintValue,@constraintDuration)
	  set @oldConstraintName=@constraintName
		end 
	  else  
	  begin
		set @oldConstraintName=(select constraintName from constraintTable where (@constrainttype=constraintType) and (@constraintValue=ConstraintValue)and constraintDuration=constraintDuration)
		end
		begin 
		set @constraintNumber=(select constraintEntryNumber from constraintTable where (@oldConstraintName=constraintName)and (@constraintType=constraintType) and (@constraintValue=ConstraintValue) and (@constraintDuration=constraintDuration))
		insert into workLoadConstraintJunction  (workLoadId,constraintId)values (@workLoadId,@constraintNumber);
		end
		commit transaction

		end try

		begin catch


		rollback Transaction

		end catch

		end
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
GO
PRINT N'Update complete.';


GO
